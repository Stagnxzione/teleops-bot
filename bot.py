__version__ = "1.0.0"
import os
import re
import json
import logging
import subprocess  # <-- –¥–ª—è git CLI
from datetime import datetime, timedelta, timezone
from typing import List, Dict, Optional
from pathlib import Path
from html import escape as html_escape
import asyncio
from tempfile import NamedTemporaryFile  # –¥–ª—è –∑–∞–ø–∏—Å–∏ roles.json

# ===== –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —Ä–∞–±–æ—Ç–∞ —Å —á–∞—Å–æ–≤—ã–º–∏ –ø–æ—è—Å–∞–º–∏ =====
try:
    from zoneinfo import ZoneInfo
except Exception:
    ZoneInfo = None
# ====================================================

from dotenv import load_dotenv
from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    __version__ as PTB_VER,  # <<< –±—É–¥–µ–º –ø—Ä–æ–≤–µ—Ä—è—Ç—å –≤–µ—Ä—Å–∏—é –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
)
from telegram.constants import ParseMode
from telegram.helpers import mention_html
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    ContextTypes,
    TypeHandler,
    filters,
    PicklePersistence,
    Defaults,
)

# ---------------------------------------------------------
# –ü–†–û–í–ï–†–ö–ê –í–ï–†–°–ò–ô (–Ω–µ –∑–∞–ø—É—Å–∫–∞—Ç—å—Å—è –Ω–∞ —Å—Ç–∞—Ä–æ–π PTB)
# ---------------------------------------------------------
def _ensure_versions():
    try:
        major = int(str(PTB_VER).split(".")[0])
    except Exception:
        major = 0
    if major < 20:
        raise RuntimeError(
            f"python-telegram-bot >=20.x required, found {PTB_VER}. "
            "–û–±–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –ø–æ requirements/lock."
        )
_ensure_versions()

# ---------------------------------------------------------
# –õ–û–ì–ò–†–û–í–ê–ù–ò–ï
# ---------------------------------------------------------
logging.basicConfig(
    format="%(asctime)s | %(levelname)s | %(name)s | %(message)s",
    level=logging.INFO,
    force=True
)
print(">>> bot.py starting‚Ä¶", flush=True)

# ---------------------------------------------------------
# .env ‚Äî –≥—Ä—É–∑–∏–º –∏–∑ –ø–∞–ø–∫–∏ —Ñ–∞–π–ª–∞
# ---------------------------------------------------------
dotenv_path = Path(__file__).with_name(".env")
print(f">>> loading .env from: {dotenv_path}", flush=True)
load_dotenv(dotenv_path=dotenv_path)

BOT_TOKEN = os.getenv("BOT_TOKEN", "")

# ===== –ø–æ–ª—É—á–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é —Ç–∞–π–º–∑–æ–Ω—É —Å —Ñ–æ–ª–±—ç–∫–æ–º =====
LOCAL_TZ_NAME = os.getenv("LOCAL_TZ", "Europe/Moscow")

def _resolve_local_tz(name: str):
    if ZoneInfo is not None:
        try:
            return ZoneInfo(name), f"ZoneInfo({name})"
        except Exception:
            pass
    try:
        import tzdata
        if ZoneInfo is not None:
            try:
                return ZoneInfo(name), f"ZoneInfo({name}) via tzdata"
            except Exception:
                pass
    except Exception:
        pass
    fixed_map = {"Europe/Moscow": timezone(timedelta(hours=3)), "UTC": timezone.utc}
    if name in fixed_map:
        return fixed_map[name], f"fixed-offset({name})"
    return timezone.utc, "fallback=UTC"

LOCAL_TZ, LOCAL_TZ_SRC = _resolve_local_tz(LOCAL_TZ_NAME)

def _parse_admin_ids(env_value: str) -> set[int]:
    ids = set()
    for part in (env_value or "").split(","):
        part = part.strip()
        if not part:
            continue
        try:
            ids.add(int(part))
        except ValueError:
            pass
    return ids

ADMIN_IDS = _parse_admin_ids(os.getenv("ADMIN_USER_IDS", "")) or _parse_admin_ids(os.getenv("ADMIN_USER_ID", ""))

THREADS_CHAT_ID = int(os.getenv("THREADS_CHAT_ID", "0") or "0")
ENTRY_THREAD_ID = int(os.getenv("ENTRY_THREAD_ID", "0") or "0")
REPORT_THREAD_ID = int(os.getenv("REPORT_THREAD_ID", "0") or "0")  # –¢–µ–º–∞ –¥–ª—è –æ—Ç—á—ë—Ç–æ–≤

print(">>> ENV CHECK:",
      "BOT_TOKEN set" if bool(BOT_TOKEN) else "BOT_TOKEN MISSING",
      f"ADMIN_IDS={sorted(ADMIN_IDS)}",
      f"THREADS_CHAT_ID={THREADS_CHAT_ID}",
      f"ENTRY_THREAD_ID={ENTRY_THREAD_ID}",
      f"REPORT_THREAD_ID={REPORT_THREAD_ID}",
      f"LOCAL_TZ={LOCAL_TZ_NAME} ({LOCAL_TZ_SRC})",
      sep=" | ", flush=True)

if not BOT_TOKEN:
    raise RuntimeError("–ù–µ –∑–∞–¥–∞–Ω BOT_TOKEN –≤ .env")
if not ADMIN_IDS:
    raise RuntimeError("–ù–µ –∑–∞–¥–∞–Ω—ã ADMIN_USER_IDS –≤ .env (—Å–ø–∏—Å–æ–∫ ID —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)")
if not THREADS_CHAT_ID:
    raise RuntimeError("–ù–µ –∑–∞–¥–∞–Ω THREADS_CHAT_ID ‚Äî —ç—Ç–æ —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–∞ —Å –≤–∫–ª—é—á—ë–Ω–Ω—ã–º–∏ –¢–µ–º–∞–º–∏ (Forum)")
if not ENTRY_THREAD_ID:
    raise RuntimeError("–ù–µ –∑–∞–¥–∞–Ω ENTRY_THREAD_ID ‚Äî —ç—Ç–æ id —Ç–µ–º—ã ¬´–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞¬ª –≤ –≤–∞—à–µ–π —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–µ")
if not REPORT_THREAD_ID:
    raise RuntimeError("–ù–µ –∑–∞–¥–∞–Ω REPORT_THREAD_ID ‚Äî —ç—Ç–æ id —Ç–µ–º—ã –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –æ—Ç—á—ë—Ç–æ–≤")

# ==========================================================
# ==== VERSIONING (ENV -> version.json -> git -> __version__)
# ==========================================================
_VERSION_JSON_PATH = Path(__file__).with_name("version.json")

def _read_version_json(path: Path) -> Optional[Dict[str, str]]:
    try:
        if path.exists():
            data = json.loads(path.read_text(encoding="utf-8"))
            # –æ–∂–∏–¥–∞–µ–º—ã–µ –∫–ª—é—á–∏: describe, branch, sha, build_at
            return {
                "describe": str(data.get("describe") or ""),
                "branch": str(data.get("branch") or ""),
                "sha": str(data.get("sha") or ""),
                "build_at": str(data.get("build_at") or ""),
            }
    except Exception as e:
        logging.debug("version.json read failed: %s", e)
    return None

def _git_cmd(args: List[str]) -> Optional[str]:
    try:
        out = subprocess.check_output(["git"] + args, stderr=subprocess.DEVNULL)
        return out.decode("utf-8", "ignore").strip()
    except Exception:
        return None

def _git_info() -> Optional[Dict[str, str]]:
    desc = _git_cmd(["describe", "--tags", "--dirty", "--always"])
    if not desc:
        return None
    branch = _git_cmd(["rev-parse", "--abbrev-ref", "HEAD"]) or ""
    sha = _git_cmd(["rev-parse", "--short", "HEAD"]) or ""
    # –∫–æ–≥–¥–∞ –∏–∑ git ‚Äî build_at —Å—Ç–∞–≤–∏–º —Ç–µ–∫—É—â–µ–µ UTC –≤—Ä–µ–º—è
    build_at = datetime.utcnow().replace(tzinfo=timezone.utc).strftime("%Y-%m-%dT%H:%M:%SZ")
    return {"describe": desc, "branch": branch, "sha": sha, "build_at": build_at}

def _env_info() -> Optional[Dict[str, str]]:
    d = os.getenv("GIT_DESCRIBE")
    b = os.getenv("GIT_BRANCH")
    s = os.getenv("GIT_SHA")
    t = os.getenv("BUILD_AT")
    if any([d, b, s, t]):
        return {
            "describe": d or "",
            "branch": b or "",
            "sha": s or "",
            "build_at": t or "",
        }
    return None

def get_build_info() -> Dict[str, str]:
    # 1) ENV –æ—Ç CI/—Å–µ—Ä–≤–∏—Å–∞
    info = _env_info()
    if info:
        return info
    # 2) version.json –æ—Ç CI (–ª–µ–∂–∏—Ç —Ä—è–¥–æ–º —Å bot.py)
    info = _read_version_json(_VERSION_JSON_PATH)
    if info:
        return info
    # 3) –ª–æ–∫–∞–ª—å–Ω—ã–π git
    info = _git_info()
    if info:
        return info
    # 4) —Å–æ–≤—Å–µ–º fallback
    return {"describe": __version__, "branch": "", "sha": "", "build_at": ""}

def version_banner() -> str:
    i = get_build_info()
    tail = []
    if i.get("branch"):
        tail.append(i["branch"])
    if i.get("sha"):
        tail.append(f"@{i['sha']}")
    tail_str = "[" + " ".join(tail) + "]" if tail else ""
    built = f" built {i['build_at']}" if i.get("build_at") else ""
    return f"{i['describe']}{(' ' + tail_str) if tail_str else ''}{built} | PTB {PTB_VER}"

def changelog_text(limit: int = 15) -> str:
    """
    –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–¥–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∫–æ–º–º–∏—Ç—ã.
    –ï—Å–ª–∏ git –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω ‚Äî —á–µ—Å—Ç–Ω–æ —Å–∫–∞–∂–µ–º, —á—Ç–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.
    """
    # –ö—Ä–∞—Å–∏–≤–æ: –¥–∞—Ç–∞ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–µ—Ä–≤–µ—Ä–∞ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–∞ ‚Äî –ø—É—Å—Ç—å UTC
    try:
        out = _git_cmd(["log", f"-{limit}", "--pretty=format:%h %ad %s", "--date=short"])
        if out:
            lines = out.splitlines()
            # —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º –¥–ª—è HTML <code>
            safe = "\n".join(html_escape(line, quote=False) for line in lines)
            return safe
    except Exception:
        pass
    return "Changelog –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ git –∏—Å—Ç–æ—Ä–∏–∏)."

# ---------------------------------------------------------
# –ü–µ—á–∞—Ç–∞–µ–º –±–∞–Ω–Ω–µ—Ä –≤–µ—Ä—Å–∏–∏ –≤ –ª–æ–≥–∏ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å–∞
# ---------------------------------------------------------
print(">>> build:", version_banner(), flush=True)

VEHICLE_TYPES = ["Kia Ceed", "Sitrak"]

TASK_CHOICES = [
    ("–ö–æ–º–∞–Ω–¥–∞ \"Emergency Brake\" —Å –ø–æ—Å–ª–µ–¥—É—é—â–∏–º –µ–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ–º", "emergency_brake"),
    ("–ö–æ–º–∞–Ω–¥–∞ \"Safe Brake\" —Å –ø–æ—Å–ª–µ–¥—É—é—â–∏–º –µ–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ–º", "safe_brake"),
    ("–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏ —Ç–µ–ª–µ–æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º", "teleop_path"),
]
PRESET_TASKS = ["emergency_brake", "safe_brake", "teleop_path"]

DRV_RE = re.compile(r"^[A-Za-z]{3}-?\d{3,10}$")
NUM_RE = re.compile(r"^\d{1,6}$")

ENTRY_PROMPT = "–ß—Ç–æ–±—ã —Å–≤—è–∑–∞—Ç—å—Å—è —Å —Ç–µ–ª–µ–æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–π–¥–∏ –≤ —á–∞—Ç —Å –±–æ—Ç–æ–º üëá"

# ==========================================================
# –ü–ê–ú–Ø–¢–¨ + JSON-–ø–µ—Ä—Å–∏—Å—Ç
# ==========================================================
STATE_PATH = Path(__file__).with_name("bot_state.json")
ROLES_PATH = Path(__file__).with_name("roles.json")  # –æ—Ç–¥–µ–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Ä–æ–ª–µ–π
logging.info("STATE_PATH=%s | ROLES_PATH=%s", STATE_PATH.resolve(), ROLES_PATH.resolve())

AUTH_DRIVERS: Dict[int, Dict] = {}
DRIVERS: Dict[int, Dict] = {}
NEXT_REQUEST_ID = 1
REQUESTS: Dict[int, Dict] = {}
PENDING_ADMIN_COMMENT: Dict[int, int] = {}
REQUEST_LOCKS: Dict[int, asyncio.Lock] = {}

# ==== –û–¢–î–ï–õ–¨–ù–û–ï –•–†–ê–ù–ò–õ–ò–©–ï –†–û–õ–ï–ô ==============================================
class RolesStore:
    """roles.json —Å –∞—Ç–æ–º–∞—Ä–Ω–æ–π –∑–∞–ø–∏—Å—å—é, –∞–≤—Ç–æ–ø–µ—Ä–µ–Ω–æ—Å–æ–º –∏–∑ bot_state.json."""
    def __init__(self, path: Path):
        self.path = path
        self._roles: Dict[int, str] = {}

    def load(self):
        # 1) —á–∏—Ç–∞–µ–º roles.json –µ—Å–ª–∏ –µ—Å—Ç—å
        if self.path.exists():
            try:
                data = json.loads(self.path.read_text("utf-8"))
                self._roles = {int(k): v for k, v in data.items()}
                logging.info("Roles loaded from %s (count=%d)", self.path, len(self._roles))
                return
            except Exception as e:
                logging.warning("Failed to load roles.json: %s", e)
        # 2) –º–∏–≥—Ä–∞—Ü–∏—è –∏–∑ —Å—Ç–∞—Ä–æ–≥–æ bot_state.json (–ø–æ–ª–µ ROLES)
        try:
            if STATE_PATH.exists():
                st = json.loads(STATE_PATH.read_text("utf-8"))
                old = st.get("ROLES") or {}
                if old:
                    self._roles = {int(k): v for k, v in old.items()}
                    self.save()
                    logging.info("Roles migrated from bot_state.json to roles.json (count=%d)", len(self._roles))
        except Exception as e:
            logging.warning("Failed to migrate roles from bot_state.json: %s", e)

    def save(self):
        # –∞—Ç–æ–º–∞—Ä–Ω–∞—è –∑–∞–ø–∏—Å—å —á–µ—Ä–µ–∑ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        payload = json.dumps({str(k): v for k, v in self._roles.items()}, ensure_ascii=False, indent=2)
        try:
            with NamedTemporaryFile("w", delete=False, encoding="utf-8", dir=str(self.path.parent)) as tf:
                tf.write(payload)
                tmp = tf.name
            os.replace(tmp, self.path)
        except Exception as e:
            logging.warning("Failed to write roles.json: %s", e)

    def get(self, user_id: int) -> Optional[str]:
        if user_id in ADMIN_IDS:
            return "admin"
        return self._roles.get(user_id)

    def set(self, user_id: int, role: str):
        # –∞–¥–º–∏–Ω–æ–≤ –Ω–µ –ø–∏—à–µ–º ‚Äî –∏—Ö —Ä–æ–ª—å –∏–∑ ADMIN_IDS
        if user_id in ADMIN_IDS:
            self._roles.pop(user_id, None)
        else:
            self._roles[user_id] = role
        self.save()

    def all_operators(self) -> List[int]:
        ops = [uid for uid, r in self._roles.items() if r == "operator"]
        # –∞–¥–º–∏–Ω–æ–≤ –¥–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ–≥–¥–∞
        return list(sorted(set(ops + list(ADMIN_IDS))))

ROLES_STORE = RolesStore(ROLES_PATH)
# ============================================================================

def _load_state() -> None:
    global DRIVERS, NEXT_REQUEST_ID, REQUESTS, PENDING_ADMIN_COMMENT
    if not STATE_PATH.exists():
        return
    try:
        data = json.loads(STATE_PATH.read_text(encoding="utf-8"))
        DRIVERS = data.get("DRIVERS", {})
        NEXT_REQUEST_ID = int(data.get("NEXT_REQUEST_ID", 1))
        REQUESTS = data.get("REQUESTS", {})
        PENDING_ADMIN_COMMENT = data.get("PENDING_ADMIN_COMMENT", {})
        logging.info("State loaded from %s (reqs=%d, drivers=%d)", STATE_PATH, len(REQUESTS), len(DRIVERS))
    except Exception as e:
        logging.warning("Failed to load state: %s", e)

# --- –°–ò–ù–•–†–û–ù–ù–û–ï –∏ –ê–¢–û–ú–ê–†–ù–û–ï —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è ---
def _save_state() -> None:
    try:
        data = {
            "DRIVERS": DRIVERS,
            "NEXT_REQUEST_ID": NEXT_REQUEST_ID,
            "REQUESTS": REQUESTS,
            "PENDING_ADMIN_COMMENT": PENDING_ADMIN_COMMENT,
        }
        payload = json.dumps(data, ensure_ascii=False, indent=2)
        tmp_path = STATE_PATH.with_suffix(".json.tmp")
        tmp_path.write_text(payload, encoding="utf-8")
        os.replace(tmp_path, STATE_PATH)  # –∞—Ç–æ–º–∞—Ä–Ω–∞—è –∑–∞–º–µ–Ω–∞
        logging.debug("State saved to %s (%d bytes)", STATE_PATH, len(payload))
    except Exception as e:
        logging.warning("Failed to save state: %s", e)

_load_state()
ROLES_STORE.load()  # –∑–∞–≥—Ä—É–∑–∏–ª–∏ (–∏–ª–∏ –º–∏–≥—Ä–∏—Ä–æ–≤–∞–ª–∏) —Ä–æ–ª–∏ –æ—Ç–¥–µ–ª—å–Ω–æ

# ==========================================================
# –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï
# ==========================================================
def set_driver_seen(u) -> None:
    DRIVERS[u.id] = {
        "user_id": u.id,
        "first_name": u.first_name or "",
        "last_name": u.last_name or "",
        "username": u.username or "",
    }
    _save_state()

# ---- –†–û–õ–ò (—á–µ—Ä–µ–∑ RolesStore) ----
def get_user_role(user_id: int) -> Optional[str]:
    return ROLES_STORE.get(user_id)

def is_admin(user_id: int) -> bool:
    return user_id in ADMIN_IDS

def is_operator(user_id: int) -> bool:
    return get_user_role(user_id) == "operator"

def is_driver(user_id: int) -> bool:
    return get_user_role(user_id) == "driver"

def is_staff(user_id: int) -> bool:
    return is_admin(user_id) or is_operator(user_id)

def set_user_role(user_id: int, role: str) -> None:
    ROLES_STORE.set(user_id, role)

def all_operator_ids() -> List[int]:
    return ROLES_STORE.all_operators()

def new_request_id() -> int:
    global NEXT_REQUEST_ID
    rid = NEXT_REQUEST_ID
    NEXT_REQUEST_ID += 1
    _save_state()
    return rid

def create_request(driver_user_id: int, task_code: str, vehicle_type: str,
                   vehicle_number: str, tasks: List[str]) -> int:
    rid = new_request_id()
    now_iso = datetime.now(timezone.utc).isoformat()
    REQUESTS[rid] = {
        "id": rid,
        "driver_user_id": driver_user_id,
        "task_code": task_code,
        "vehicle_type": vehicle_type,
        "vehicle_number": vehicle_number,
        "tasks": tasks[:],  # –º–æ–∂–µ—Ç –±—ã—Ç—å ["custom"]
        "status": "new",
        "operator_user_id": None,
        "operator_comment": "",
        "created_at": now_iso,
        "accepted_at": None,
        "closed_at": None,
        "updated_at": now_iso,
        "admin_message_ids": [],
        "thread_id": None,
        "thread_message_id": None,       # —è–∫–æ—Ä—å: –æ–ø–∏—Å–∞–Ω–∏–µ (–∑–∞–∫—Ä–µ–ø)
        "thread_wait_message_id": None,  # ¬´–û–∂–∏–¥–∞–ª–∫–∞¬ª
        # (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) –º–æ–∂–Ω–æ —Ö—Ä–∞–Ω–∏—Ç—å ¬´raw_description¬ª, –µ—Å–ª–∏ –≤ –±—É–¥—É—â–µ–º –ø–æ—è–≤–∏—Ç—Å—è —Å–≤–æ–±–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç
    }
    _save_state()
    return rid

def save_request_message_ids(request_id: int, admin_msg_ids: Optional[Dict[int, int]] = None, thread_msg_id: Optional[int] = None, thread_wait_message_id: Optional[int] = None):
    req = REQUESTS.get(request_id)
    if not req:
        return
    if admin_msg_ids is not None:
        req["admin_message_ids"] = [{"admin_id": k, "message_id": v} for k, v in admin_msg_ids.items()]
    if thread_msg_id is not None:
        req["thread_message_id"] = thread_msg_id
    if thread_wait_message_id is not None:
        req["thread_wait_message_id"] = thread_wait_message_id
    req["updated_at"] = datetime.now(timezone.utc).isoformat()
    _save_state()

def set_request_status(request_id: int, status: str, operator_user_id: Optional[int]):
    req = REQUESTS.get(request_id)
    if not req: return
    req["status"] = status
    if operator_user_id is not None:
        req["operator_user_id"] = operator_user_id
    req["updated_at"] = datetime.now(timezone.utc).isoformat()
    _save_state()

def set_request_comment(request_id: int, operator_user_id: int, comment: Optional[str]):
    req = REQUESTS.get(request_id)
    if not req: return
    req["operator_comment"] = comment or ""
    req["operator_user_id"] = operator_user_id
    req["updated_at"] = datetime.now(timezone.utc).isoformat()
    _save_state()

def mark_accepted(request_id: int, operator_user_id: int):
    req = REQUESTS.get(request_id)
    if not req: return
    req["operator_user_id"] = operator_user_id
    req["accepted_at"] = datetime.now(timezone.utc).isoformat()
    req["updated_at"] = req["accepted_at"]
    _save_state()

def mark_closed(request_id: int, operator_user_id: int):
    req = REQUESTS.get(request_id)
    if not req: return
    req["operator_user_id"] = operator_user_id
    req["closed_at"] = datetime.now(timezone.utc).isoformat()
    req["updated_at"] = req["closed_at"]
    _save_state()

def load_request(request_id: int) -> Optional[Dict]:
    return REQUESTS.get(request_id)

def load_driver(user_id: int) -> Optional[Dict]:
    return DRIVERS.get(user_id)

# ---------- –ù–û–†–ú–ê–õ–ò–ó–ê–¶–ò–Ø –ö–û–î–ê –ó–ê–î–ê–ß–ò ----------
def normalize_task_code(raw: str) -> str:
    s = (raw or "").strip()
    if not s:
        return "-"
    m = re.fullmatch(r"([A-Za-z]{3})-?(\d{3,10})", s)
    if not m:
        return s[:100]
    return f"{m.group(1).upper()}-{m.group(2)}"

# ==========================================================
# –§–û–†–ú–ê–¢–´
# ==========================================================
def tasks_human_readable(codes: List[str]) -> str:
    mapping = {code: text for (text, code) in TASK_CHOICES}
    mapping["custom"] = "–ù–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –∑–∞–¥–∞—á–∞"
    return "; ".join(mapping.get(c, c) for c in codes) if codes else "‚Äî"

def vehicle_bort(vehicle_type: str, vehicle_number: str) -> str:
    number = (vehicle_number or "").strip()
    if not number:
        return "‚Äî"
    if vehicle_type == "Kia Ceed":
        return f"kc2-{number}"
    if vehicle_type == "Sitrak":
        return f"st-{number}"
    return f"{vehicle_type} {number}"

def _parse_iso(iso_str: Optional[str]) -> Optional[datetime]:
    if not iso_str:
        return None
    try:
        dt = datetime.fromisoformat(iso_str)
        if dt.tzinfo is None:
            dt = dt.replace(tzinfo=timezone.utc)
        return dt.astimezone(timezone.utc)
    except Exception:
        return None

def _to_local(dt_utc: Optional[datetime]):
    if dt_utc is None:
        return None
    try:
        return dt_utc.astimezone(LOCAL_TZ)
    except Exception:
        return None

def _fmt_hhmm_from_iso(iso_str: Optional[str]) -> str:
    dt_utc = _parse_iso(iso_str)
    dt_local = _to_local(dt_utc)
    return dt_local.strftime("%H:%M") if dt_local else "--:--"

def _fmt_date_from_iso(iso_str: Optional[str]) -> str:
    dt_utc = _parse_iso(iso_str)
    dt_local = _to_local(dt_utc)
    return dt_local.strftime("%d.%m.%Y") if dt_local else "--.--.----"

def _driver_display_name(driver: Dict) -> str:
    first = (driver.get("first_name") or "").strip()
    last = (driver.get("last_name") or "").strip()
    return (first + (" " + last if last else "")).strip() or "–í–æ–¥–∏—Ç–µ–ª—å"

def request_summary_text(req: Dict) -> str:
    dt_local = _fmt_date_from_iso(req.get("created_at")) + " " + _fmt_hhmm_from_iso(req.get("created_at"))

    driver = load_driver(req["driver_user_id"]) or {}
    driver_name = _driver_display_name(driver)
    username = driver.get("username") or ""
    mention = mention_html(driver.get("user_id", 0), driver_name or "–í–æ–¥–∏—Ç–µ–ª—å")

    task_code = (req.get("task_code") or "").strip() or "-"
    bort = html_escape(vehicle_bort(req.get("vehicle_type",""), req.get("vehicle_number","")))
    tasks_line = html_escape(tasks_human_readable(req.get("tasks", [])))

    return (
        f"<b>–ó–∞—è–≤–∫–∞ –æ—Ç {dt_local}</b>\n"
        f"–ó–∞–¥–∞—á–∞ –≤ Jira: <b>{html_escape(task_code)}</b>\n"
        f"–í–ê–¢–°: <b>{bort}</b>\n"
        f"–í–æ–¥–∏—Ç–µ–ª—å: {mention}" + (f" (@{username})" if username else "") + "\n"
        f"–ó–∞–¥–∞—á–∏: <b>{tasks_line}</b>"
    )

def _esc(s: Optional[str]) -> str:
    return html_escape("" if s is None else str(s), quote=False)

# ====== –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —Ä–µ—à–µ–Ω–∏—è (accepted -> closed) ======
def _resolution_minutes(accepted_iso: Optional[str], closed_iso: Optional[str]) -> Optional[int]:
    if not (accepted_iso and closed_iso):
        return None
    try:
        accepted = datetime.fromisoformat(accepted_iso)
        closed = datetime.fromisoformat(closed_iso)
        delta = closed - accepted
        if delta.total_seconds() < 0:
            return None
        return int(delta.total_seconds() // 60)
    except Exception:
        return None

BULLET_TEXTS: Dict[str, str] = {
    "emergency_brake": '–∫–æ–º–∞–Ω–¥–∞ "Emergency Brake" –æ—Ç —Ç–µ–ª–µ–æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –ø—Ä–∏–≤–æ–¥–∏—Ç –∫ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–µ —Å–æ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–º —É—Å–∫–æ—Ä–µ–Ω–∏–µ–º —Ç–æ—Ä–º–æ–∂–µ–Ω–∏—è, –ø–æ—Å–ª–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è "Emergency Brake" —Ç–µ–ª–µ–æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º, –í–ê–¢–° –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç –¥–≤–∏–∂–µ–Ω–∏–µ;',
    "safe_brake": '–∫–æ–º–∞–Ω–¥–∞ "Safe Brake" –æ—Ç —Ç–µ–ª–µ–æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –ø—Ä–∏–≤–æ–¥–∏—Ç –∫ –ø–ª–∞–≤–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–µ, –ø–æ—Å–ª–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è "Safe Brake" —Ç–µ–ª–µ–æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º, –í–ê–¢–° –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç –¥–≤–∏–∂–µ–Ω–∏–µ;',
    "teleop_path": '–í–ê–¢–° –ø—Ä–æ–µ–∑–∂–∞–µ—Ç –ø–æ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏, –ø–æ—Å—Ç—Ä–æ–µ–Ω–Ω–æ–π —Ç–µ–ª–µ–æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –≤ –∫–æ–Ω—Ü–µ –Ω–∞—Ä–∏—Å–æ–≤–∞–Ω–Ω–æ–π –¥–æ—Ä–æ–≥–∏ –∏ –Ω–∞—á–∏–Ω–∞–µ—Ç –¥–≤–∏–∂–µ–Ω–∏–µ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è —Ç–µ–ª–µ–æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º –Ω–∞—Ä–∏—Å–æ–≤–∞–Ω–Ω–æ–π –¥–æ—Ä–æ–≥–∏.',
}

def _punctuate_bullet(text: str, is_last: bool) -> str:
    t = (text or "").strip()
    if is_last:
        t = t.rstrip(";").rstrip(".") + "."
    else:
        t = t.rstrip(".").rstrip(";") + ";"
    return t

# --------- Deeplink helper (–ø—Ä–µ–¥–≤—ã—á–∏—Å–ª–µ–Ω–Ω—ã–π –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π id) ----------
if str(THREADS_CHAT_ID).startswith("-100"):
    _THREADS_INTERNAL_ID = str(THREADS_CHAT_ID)[4:]
else:
    _THREADS_INTERNAL_ID = str(abs(THREADS_CHAT_ID))

def _topic_message_link(msg_id: int) -> Optional[str]:
    if not msg_id:
        return None
    return f"https://t.me/c/{_THREADS_INTERNAL_ID}/{msg_id}"

def _topic_link_for_req(req: Dict) -> Optional[str]:
    return _topic_message_link(req.get("thread_message_id") or 0)

def _build_description(req: Dict) -> str:
    """–§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–ª–æ ¬´–û–ø–∏—Å–∞–Ω–∏–µ¬ª –¥–ª—è –æ—Ç—á—ë—Ç–∞, —Å —É—á—ë—Ç–æ–º custom."""
    task_code = (req.get("task_code") or "-").strip()
    tasks = req.get("tasks", []) or []
    comment = (req.get("operator_comment") or "").strip()

    if "custom" in tasks:
        link = _topic_link_for_req(req)
        text = "–ù–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –∑–∞–¥–∞—á–∞ (–æ–ø–∏—Å–∞–Ω–∏–µ –≤ —Ç–æ–ø–∏–∫–µ)"
        first_line = f'<a href="{html_escape(link)}">{html_escape(text)}</a>' if link else text
        lines = [first_line]
        if comment:
            lines.append(comment)
        return "\n".join(lines)

    lines = []
    if task_code != "-":
        lines.append(f"–ó–∞–¥–∞—á–∞ {task_code}.")
    checks = [c for c in tasks if BULLET_TEXTS.get(c)]
    if checks:
        lines.append("–í—ã–ø–æ–ª–Ω–∏–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É —Å–ª–µ–¥—É—é—â–∏—Ö –∫–æ–º–∞–Ω–¥:")
        last_idx = len(checks) - 1
        for idx, code in enumerate(checks):
            raw = BULLET_TEXTS[code]
            lines.append(f"- {_punctuate_bullet(raw, is_last=(idx == last_idx))}")
    if comment:
        lines.append(comment)
    return "\n".join(lines)

def report_text(req: Dict) -> str:
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –æ—Ç—á—ë—Ç–∞.
    - –î–ª—è tasks —Å "custom": –æ—Å—Ç–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É "–ù–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –∑–∞–¥–∞—á–∞ (–æ–ø–∏—Å–∞–Ω–∏–µ –≤ —Ç–æ–ø–∏–∫–µ)".
    - –î–ª—è –æ–±—ã—á–Ω—ã—Ö tasks: –æ–ø–∏—Å–∞–Ω–∏–µ –≤—ã–≤–æ–¥–∏–º –∫–∞–∫ —Å–∫–æ–ø–∏—Ä—É–µ–º—ã–π –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã–π —Ç–µ–∫—Å—Ç.
    """
    created_iso = req.get("created_at")
    date_line = _fmt_date_from_iso(created_iso)
    time_line = _fmt_hhmm_from_iso(created_iso)
    vts = vehicle_bort(req.get("vehicle_type",""), req.get("vehicle_number",""))

    mins = _resolution_minutes(req.get("accepted_at"), req.get("closed_at"))
    solve = "-" if mins is None else ("<1 –º–∏–Ω" if mins < 1 else f"~{mins} –º–∏–Ω")

    status_line = ""
    st = (req.get("status") or "").strip()
    if st == "done":
        status_line = "\n<b>‚úÖ –ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞</b>"
    elif st == "not_done":
        status_line = "\n<b>‚ùå –ó–∞–¥–∞—á–∞ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞</b>"

    descr_block = _build_description(req)
    is_custom = "custom" in (req.get("tasks") or [])

    if is_custom:
        descr_line = f"<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {descr_block}"
    else:
        # –±–µ–∑ —Å—Å—ã–ª–æ–∫, –∫–∞–∫ –∫–æ–ø–∏—Ä—É–µ–º—ã–π —Ç–µ–∫—Å—Ç
        descr_line = f"<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>\n<code>{_esc(descr_block)}</code>"

    return (
        f"<b>–û—Ç—á–µ—Ç –æ—Ç</b> <code>{_esc(date_line)}</code>\n"
        f"<b>–í—Ä–µ–º—è:</b> <code>{_esc(time_line)}</code>\n"
        f"<b>–í–ê–¢–°:</b> <code>{_esc(vts)}</code>"
        f"{status_line}\n"
        f"{descr_line}\n"
        f"<b>–í—Ä–µ–º—è —Ä–µ—à–µ–Ω–∏—è:</b> <code>{_esc(solve)}</code>"
    )

# ==== –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ====
SKIP_TASK_CODE_KB = InlineKeyboardMarkup([[InlineKeyboardButton("–ù–µ —É–∫–∞–∑—ã–≤–∞—Ç—å", callback_data="skip_task_code")]])
VEHICLE_TYPE_KB = InlineKeyboardMarkup([
    [InlineKeyboardButton("Kia Ceed", callback_data="vehicle:Kia Ceed"),
     InlineKeyboardButton("Sitrak",  callback_data="vehicle:Sitrak")],
    [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to:task_code")],
])
TASKS_CHOICE_KB = InlineKeyboardMarkup([
    [InlineKeyboardButton("‚úÖ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏", callback_data="tasks_preset")],
    [InlineKeyboardButton("üìù –í—ã–±—Ä–∞—Ç—å –≤—Ä—É—á–Ω—É—é", callback_data="tasks_manual")],
    [InlineKeyboardButton("üß© –ù–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –∑–∞–¥–∞—á–∞", callback_data="tasks_custom")],
    [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to:vehicle_number")],
])

ROLE_PICK_KB = InlineKeyboardMarkup([
    [InlineKeyboardButton("üöó –í–æ–¥–∏—Ç–µ–ª—å", callback_data="set_role:driver")],
    [InlineKeyboardButton("üßë‚Äçüíª –¢–µ–ª–µ–æ–ø–µ—Ä–∞—Ç–æ—Ä", callback_data="set_role:operator")],
])

def back_keyboard(target_stage: str) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"back_to:{target_stage}")]])

def tasks_keyboard(selected: Optional[List[str]] = None) -> InlineKeyboardMarkup:
    selected = selected or []
    rows = []
    for text, code in TASK_CHOICES:
        mark = "‚úÖ" if code in selected else "‚¨úÔ∏è"
        rows.append([InlineKeyboardButton(f"{mark} {text}", callback_data=f"task_toggle:{code}")])
    rows.append([
        InlineKeyboardButton("–ì–æ—Ç–æ–≤–æ", callback_data="tasks_done"),
        InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="tasks_cancel"),
    ])
    rows.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to:vehicle_number")])
    return InlineKeyboardMarkup(rows)

def operator_controls_keyboard(request_id: int, current_status: str, deep_link: Optional[str] = None) -> InlineKeyboardMarkup:
    status_line = {
        "done":"‚úÖ –ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞",
        "not_done":"‚ùå –ó–∞–¥–∞—á–∞ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞",
        "new":"‚è≥ –û–∂–∏–¥–∞–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è",
        "closed":"üîí –ó–∞–∫—Ä—ã—Ç–∞"
    }.get(current_status,current_status)
    rows = [
        [InlineKeyboardButton("‚úÖ –ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞", callback_data=f"op_status:{request_id}:done")],
        [InlineKeyboardButton("‚ùå –ó–∞–¥–∞—á–∞ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞", callback_data=f"op_status:{request_id}:not_done")],
        [InlineKeyboardButton("üóÑ –ó–∞–∫—Ä—ã—Ç—å –∑–∞—è–≤–∫—É",      callback_data=f"op_close:{request_id}")],
    ]
    if deep_link:
        rows.append([InlineKeyboardButton("üí¨ –ü–µ—Ä–µ–π—Ç–∏ –∫ —á–∞—Ç—É —Å –≤–æ–¥–∏—Ç–µ–ª–µ–º", url=deep_link)])
    rows.append([InlineKeyboardButton(f"‚ÑπÔ∏è –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: {status_line}", callback_data="noop")])
    return InlineKeyboardMarkup(rows)

def operator_claim_keyboard(request_id: int) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([[InlineKeyboardButton("üßë‚Äçüíª –ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è", callback_data=f"op_claim:{request_id}")]])

def _driver_open_url_keyboard(url: str) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([[InlineKeyboardButton("üí¨ –ü–µ—Ä–µ–π—Ç–∏ –∫ —á–∞—Ç—É —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º", url=url)]])

# ==========================================================
# –¢–û–ü–ò–ö–ò (FORUM TOPICS)
# ==========================================================
async def ensure_forum_topic(context: ContextTypes.DEFAULT_TYPE, req: Dict) -> Optional[int]:
    if req.get("thread_id"):
        return req["thread_id"]
    created = req.get("created_at")
    title_dt = _fmt_date_from_iso(created) + " " + _fmt_hhmm_from_iso(created)
    title = f"–ó–∞—è–≤–∫–∞ –æ—Ç {title_dt}"
    try:
        topic = await context.bot.create_forum_topic(chat_id=THREADS_CHAT_ID, name=title)
        thread_id = topic.message_thread_id
        req["thread_id"] = thread_id
        req["updated_at"] = datetime.now(timezone.utc).isoformat()
        _save_state()
        logging.info("Forum topic created: thread_id=%s for request #%s", thread_id, req["id"])
        return thread_id
    except Exception as e:
        logging.exception("create_forum_topic failed", exc_info=e)
        return None

async def post_intro_in_topic(context: ContextTypes.DEFAULT_TYPE, req: Dict, text: str) -> Optional[int]:
    if not req.get("thread_id"):
        return None
    try:
        m = await context.bot.send_message(
            chat_id=THREADS_CHAT_ID,
            message_thread_id=req["thread_id"],
            text=text,
            parse_mode=ParseMode.HTML,          # –≤–∞–∂–Ω–æ: –∫–æ–ø–∏—Ä—É–µ–º ¬´–∫–∞–∫ –µ—Å—Ç—å¬ª
            disable_web_page_preview=True,
        )
        req["thread_message_id"] = m.message_id  # —è–∫–æ—Ä—å ‚Äî –æ–ø–∏—Å–∞–Ω–∏–µ
        req["updated_at"] = datetime.now(timezone.utc).isoformat()
        _save_state()
        logging.info("Intro posted in thread %s (msg_id=%s)", req["thread_id"], m.message_id)
        return m.message_id
    except Exception as e:
        logging.exception("post_intro_in_topic failed", exc_info=e)
        return None

async def post_waiting_in_topic(context: ContextTypes.DEFAULT_TYPE, req: Dict) -> Optional[int]:
    if not req.get("thread_id"):
        return None
    try:
        m = await context.bot.send_message(
            chat_id=THREADS_CHAT_ID,
            message_thread_id=req["thread_id"],
            text="‚è≥ –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞",
            parse_mode=ParseMode.HTML,
            disable_web_page_preview=True,
        )
        req["thread_wait_message_id"] = m.message_id
        req["updated_at"] = datetime.now(timezone.utc).isoformat()
        _save_state()
        logging.info("Waiting message posted in thread %s (msg_id=%s)", req["thread_id"], m.message_id)
        return m.message_id
    except Exception as e:
        logging.exception("post_waiting_in_topic failed", exc_info=e)
        return None

async def _close_forum_topic_if_any(context: ContextTypes.DEFAULT_TYPE, req: Dict):
    try:
        tid = req.get("thread_id")
        if tid:
            await context.bot.close_forum_topic(chat_id=THREADS_CHAT_ID, message_thread_id=tid)
            logging.info("Forum topic closed: thread_id=%s for request #%s", tid, req["id"])
    except Exception as e:
        logging.exception("close_forum_topic failed", exc_info=e)

# ==========================================================
# –≠–ö–†–ê–ù–´ (–°–¢–ê–î–ò–ò) + –í—ã–±–æ—Ä —Ä–æ–ª–∏
# ==========================================================
async def _ensure_role_or_ask(update_or_msg, context: ContextTypes.DEFAULT_TYPE) -> Optional[str]:
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª—å. –ï—Å–ª–∏ –Ω–µ—Ç ‚Äî –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å. –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–æ–ª—å –∏–ª–∏ None (–µ—Å–ª–∏ —Å–ø—Ä–æ—Å–∏–ª–∏)."""
    u = update_or_msg.from_user
    role = get_user_role(u.id)
    if role:
        return role
    # –∞–¥–º–∏–Ω–∞ –Ω–µ —Å–ø—Ä–∞—à–∏–≤–∞–µ–º ‚Äî —Ä–æ–ª—å –∏–¥—ë—Ç –∏–∑ ADMIN_USER_IDS
    if is_admin(u.id):
        return "admin"
    # –ü—Ä–æ—Å–∏–º –≤—ã–±—Ä–∞—Ç—å —Ä–æ–ª—å
    await context.bot.send_message(
        chat_id=u.id,
        text="–í—ã–±–µ—Ä–∏ —Ä–æ–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º:",
        reply_markup=ROLE_PICK_KB
    )
    return None

async def stage_task_code(message, context: ContextTypes.DEFAULT_TYPE):
    role = await _ensure_role_or_ask(message, context)
    if not role:
        return
    if role == "operator":
        await message.reply_text("–£ —Ç–µ–±—è —Ä–æ–ª—å —Ç–µ–ª–µ–æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ ‚Äî —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–æ–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ!")
        return
    context.user_data.setdefault("request", {"task_code":"","vehicle_type":"","vehicle_number":"","tasks":[]})
    context.user_data["await"] = "task_code"
    await message.reply_text("–ü—Ä–∏–≤–µ—Ç! –£–∫–∞–∂–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –≤ Jira (–Ω–∞–ø—Ä–∏–º–µ—Ä, drv12345)", reply_markup=SKIP_TASK_CODE_KB)

async def stage_vehicle_type(message, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["await"] = None
    await message.reply_text("–í—ã–±–µ—Ä–∏ —Ç–∏–ø –¢–°", reply_markup=VEHICLE_TYPE_KB)

async def stage_vehicle_number(message, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["await"] = "vehicle_number"
    await message.reply_text("–í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä –±–æ—Ä—Ç–∞ (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã)", reply_markup=back_keyboard("vehicle_type"))

async def stage_tasks(message, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["await"] = None
    await message.reply_text("–ß—Ç–æ –±—É–¥–µ–º –ø—Ä–æ–≤–µ—Ä—è—Ç—å?", reply_markup=TASKS_CHOICE_KB)

# ==========================================================
# –ö–û–ú–ê–ù–î–´
# ==========================================================
async def cmd_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    set_driver_seen(user)

    if update.effective_chat and update.effective_chat.type != "private":
        msg_thread_id = update.effective_message.message_thread_id if update.effective_message else None
        if msg_thread_id == ENTRY_THREAD_ID:
            me = await context.bot.get_me()
            btn = InlineKeyboardMarkup([[InlineKeyboardButton("–û—Ç–∫—Ä—ã—Ç—å —á–∞—Ç —Å –±–æ—Ç–æ–º", url=f"https://t.me/{me.username}?start=start")]])
            await update.effective_message.reply_text(ENTRY_PROMPT, reply_markup=btn)
        return

    role = await _ensure_role_or_ask(update.effective_message, context)
    if not role:
        return
    if role == "operator":
        await update.effective_message.reply_text("–ü—Ä–∏–≤–µ—Ç, —Ç–µ–ª–µ–æ–ø–µ—Ä–∞—Ç–æ—Ä! \n–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —Ç–≤–æ—è –ø–æ–º–æ—â—å –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è üòû")
        return
    await stage_task_code(update.effective_message, context)

async def cmd_whoami(update: Update, context: ContextTypes.DEFAULT_TYPE):
    role = get_user_role(update.effective_user.id) or "‚Äî"
    await update.effective_message.reply_text(f"–¢–≤–æ–π Telegram ID: <code>{update.effective_user.id}</code>\n–†–æ–ª—å: <b>{role}</b>")

# ==== VERSIONING COMMANDS ====
async def cmd_version(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = html_escape(version_banner(), quote=False)
    await update.effective_message.reply_text(f"<code>{text}</code>")

async def cmd_changelog(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = changelog_text(limit=15)
    await update.effective_message.reply_text(f"<code>{text}</code>")

async def cmd_setrole(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if is_admin(update.effective_user.id):
        await update.effective_message.reply_text("–£ —Ç–µ–±—è —Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏ –µ—ë –Ω–µ–ª—å–∑—è —Å–º–µ–Ω–∏—Ç—å!")
        return
    await update.effective_message.reply_text("–í—ã–±–µ—Ä–∏ —Ä–æ–ª—å:", reply_markup=ROLE_PICK_KB)

async def cmd_id(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    thread_id = update.effective_message.message_thread_id
    text = f"ID —ç—Ç–æ–≥–æ —á–∞—Ç–∞: <code>{chat_id}</code>"
    if thread_id:
        text += f"\nID —Ç–µ–º—ã: <code>{thread_id}</code>"
    await update.effective_message.reply_text(text)

async def cmd_ping(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.effective_message.reply_text("pong")

async def cmd_state(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.effective_message.reply_text(f"user_data: {dict(context.user_data)}")

# –ê–¥–º–∏–Ω—Å–∫–∞—è –∫–æ–º–∞–Ω–¥–∞: —Ñ–æ—Ä—Å-—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è (–ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—É—Ç–∏/–ø—Ä–∞–≤)
async def cmd_savestate(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.effective_user.id):
        return
    _save_state()
    await update.effective_message.reply_text(f"State saved to: <code>{STATE_PATH.resolve()}</code>")

# –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞: –ª—ë–≥–∫–∏–π –ª–æ–≥
async def on_any_update(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if logging.getLogger().isEnabledFor(logging.DEBUG):
        try:
            d = str(update)
        except Exception:
            d = "<unrepr>"
        logging.debug("UPDATE INBOUND: %s", d)

# ==========================================================
# –†–û–õ–ò ‚Äî –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ (–Ω–µ –∑–∞–ø—É—Å–∫–∞–µ–º –º–∞—Å—Ç–µ—Ä –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)
# ==========================================================
async def on_set_role(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    user_id = query.from_user.id

    if is_admin(user_id):
        set_user_role(user_id, "admin")
        try:
            await query.edit_message_reply_markup(reply_markup=None)
        except Exception:
            pass
        await query.message.reply_text("–†–æ–ª—å: –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä. –î–æ—Å—Ç—É–ø–µ–Ω –≤–µ—Å—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª (—Å–æ–∑–¥–∞–Ω–∏–µ, –ø—Ä–∏—ë–º –∏ –∑–∞–∫—Ä—ã—Ç–∏–µ –∑–∞—è–≤–æ–∫)")
        return

    data = query.data or ""
    _, _, role = data.partition(":")
    if role not in ("driver", "operator"):
        await query.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ä–æ–ª—å", show_alert=True)
        return

    set_user_role(user_id, role)

    try:
        await query.edit_message_reply_markup(reply_markup=None)
    except Exception:
        pass

    context.user_data.pop("request", None)
    context.user_data["await"] = None

    if role == "operator":
        await query.message.reply_text(
            "‚úÖ –†–æ–ª—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: <b>—Ç–µ–ª–µ–æ–ø–µ—Ä–∞—Ç–æ—Ä–∞</b>\n–ë–æ—Ç –ø—Ä–∏—à–ª–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –µ—Å–ª–∏ –±—É–¥–µ—Ç –Ω—É–∂–Ω–∞ —Ç–≤–æ—è –ø–æ–º–æ—â—å!"
        )
    else:
        await query.message.reply_text(
            "‚úÖ –†–æ–ª—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: <b>–≤–æ–¥–∏—Ç–µ–ª—å</b>\n–ï—Å–ª–∏ —Ö–æ—á–µ—à—å —Å–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å, —Ç–æ –≤–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É /start"
        )

# ==========================================================
# –î–ò–ê–õ–û–ì –í–û–î–ò–¢–ï–õ–Ø
# ==========================================================
async def on_user_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_chat and update.effective_chat.type != "private":
        return

    role = get_user_role(update.effective_user.id)
    if not role:
        await _ensure_role_or_ask(update.effective_message, context)
        return

    if role == "operator":
        return

    if is_staff(update.effective_user.id) and PENDING_ADMIN_COMMENT.get(update.effective_user.id):
        return

    msg_text = (update.effective_message.text or "").strip() if update.effective_message else ""
    logging.info("on_user_text <- %r | await=%r", msg_text, context.user_data.get("await"))

    if "await" not in context.user_data or context.user_data.get("await") is None:
        await stage_task_code(update.effective_message, context)
        return

    step = context.user_data.get("await")
    msg = msg_text

    if step == "task_code":
        msg = msg.strip()
        if msg and not DRV_RE.match(msg):
            await update.effective_message.reply_text(
                "–§–æ—Ä–º–∞—Ç –∑–∞–¥–∞—á–∏ –≤ Jira: —Ç—Ä–∏ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã –∏ 3‚Äì10 —Ü–∏—Ñ—Ä \n‚ùóÔ∏è–ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑‚ùóÔ∏è",
                reply_markup=SKIP_TASK_CODE_KB
            )
            return
        context.user_data["request"]["task_code"] = normalize_task_code(msg) if msg else "-"
        await stage_vehicle_type(update.effective_message, context)
        return

    if step == "vehicle_number":
        if not msg or not NUM_RE.match(msg):
            await update.effective_message.reply_text(
                "–ù–æ–º–µ—Ä –±–æ—Ä—Ç–∞ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, 030) \n‚ùóÔ∏è–ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑‚ùóÔ∏è",
                reply_markup=back_keyboard("vehicle_type")
            )
            return
        context.user_data["request"]["vehicle_number"] = msg
        await stage_tasks(update.effective_message, context)
        return

# ==========================================================
# –°–ö–ò–ü –ö–û–î–ê –ó–ê–î–ê–ß–ò
# ==========================================================
async def on_skip_task_code(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    context.user_data.setdefault("request", {})
    context.user_data["request"]["task_code"] = "-"
    await stage_vehicle_type(query.message, context)

# ==========================================================
# –°–ê–ë–ú–ò–¢ –ó–ê–Ø–í–ö–ò + –†–ê–°–°–´–õ–ö–ê –û–ü–ï–†–ê–¢–û–†–ê–ú/–ê–î–ú–ò–ù–ê–ú
# ==========================================================
async def _submit_request_and_notify(query, context: ContextTypes.DEFAULT_TYPE):
    req_local = context.user_data.get("request", {})
    if not (req_local.get("vehicle_type") and req_local.get("vehicle_number")):
        await query.answer("–ù–µ –≤—Å–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã!", show_alert=True); return

    request_id = create_request(
        driver_user_id=query.from_user.id,
        task_code=req_local.get("task_code") or "-",
        vehicle_type=req_local["vehicle_type"],
        vehicle_number=req_local["vehicle_number"],
        tasks=req_local.get("tasks", []),
    )

    req = load_request(request_id)
    summary = request_summary_text(req)

    # –°–æ–∑–¥–∞—ë–º —Ç–µ–º—É
    thread_id = await ensure_forum_topic(context, req)

    # 1) –ü—É–±–ª–∏–∫—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ (summary) –∏ –∑–∞–∫—Ä–µ–ø–ª—è–µ–º
    thread_msg_id = None
    if thread_id:
        summary_mid = await post_intro_in_topic(context, req, summary)
        thread_msg_id = summary_mid
        if summary_mid:
            try:
                await context.bot.pin_chat_message(chat_id=THREADS_CHAT_ID, message_id=summary_mid, disable_notification=True)
                logging.info("Pinned summary message in thread %s (msg_id=%s)", thread_id, summary_mid)
            except Exception as e:
                logging.exception("pin_chat_message failed", exc_info=e)
        # 2) ¬´–û–∂–∏–¥–∞–ª–∫–∞¬ª
        await post_waiting_in_topic(context, req)

    deep_link = _topic_message_link(thread_msg_id) if thread_msg_id else None

    # 3) –†–∞—Å—Å—ã–ª–∫–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–º –∏ –∞–¥–º–∏–Ω–∞–º (–∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–æ)
    admin_msg_ids: Dict[int, int] = {}
    bort_number = vehicle_bort(req.get("vehicle_type",""), req.get("vehicle_number",""))
    call_text = f"üö® –î–ª—è <code>{bort_number}</code> —Ç—Ä–µ–±—É–µ—Ç—Å—è –æ–ø–µ—Ä–∞—Ç–æ—Ä!"

    recipients = all_operator_ids()

    async def _send_to(aid: int):
        try:
            m = await context.bot.send_message(
                chat_id=aid,
                text=call_text,
                reply_markup=operator_claim_keyboard(request_id)
            )
            return aid, m.message_id
        except Exception as e:
            logging.exception("send CALL failed (id=%s)", aid, exc_info=e)
            return aid, None

    results = await asyncio.gather(*[_send_to(aid) for aid in recipients])
    for aid, mid in results:
        if mid:
            admin_msg_ids[aid] = mid

    save_request_message_ids(request_id, admin_msg_ids=admin_msg_ids, thread_msg_id=thread_msg_id)

    # 4) –û—Ç–≤–µ—Ç –≤–æ–¥–∏—Ç–µ–ª—é: –≤—Å–µ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º summary + –∫–Ω–æ–ø–∫—É –Ω–∞ —Ç–µ–º—É
    await context.bot.send_message(chat_id=query.from_user.id, text="‚úÖ –ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞")
    if deep_link:
        await context.bot.send_message(
            chat_id=query.from_user.id,
            text=summary,
            reply_markup=_driver_open_url_keyboard(deep_link),
            parse_mode=ParseMode.HTML,
            disable_web_page_preview=True,
        )
    else:
        await context.bot.send_message(chat_id=query.from_user.id, text=summary, parse_mode=ParseMode.HTML, disable_web_page_preview=True)

    # —Å–±—Ä–æ—Å –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    context.user_data.pop("request", None)
    context.user_data["await"] = None

# ==========================================================
# –û–ë–†–ê–ë–û–¢–ö–ê ¬´–ü–û–î–ö–õ–Æ–ß–ò–¢–¨–°–Ø¬ª
# ==========================================================
async def on_operator_claim(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data or ""
    _, _, req_id_str = data.partition(":")
    try:
        req_id = int(req_id_str)
    except ValueError:
        await query.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∑–∞—è–≤–∫–∏.", show_alert=True); return

    if not is_staff(query.from_user.id):
        await query.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!", show_alert=True); return

    req = load_request(req_id)
    if not req:
        await query.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!", show_alert=True); return

    if req.get("operator_user_id"):
        op_id = req["operator_user_id"]
        try:
            op_member = await context.bot.get_chat(op_id)
            taken_by = getattr(op_member, "username", None)
        except Exception:
            taken_by = None
        who = f"@{taken_by}" if taken_by else f"id {op_id}"
        await query.answer(f"–£–∂–µ –ø—Ä–∏–Ω—è—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º ({who})", show_alert=True)
        try:
            await context.bot.delete_message(chat_id=query.from_user.id, message_id=query.message.message_id)
        except Exception:
            pass
        return

    mark_accepted(req_id, query.from_user.id)

    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–º—É: —É–¥–∞–ª—è–µ–º ¬´–æ–∂–∏–¥–∞–ª–∫—É¬ª, –ø–∏—à–µ–º ¬´–æ–ø–µ—Ä–∞—Ç–æ—Ä –ø—Ä–∏–Ω—è–ª‚Ä¶¬ª
    try:
        wait_mid = req.get("thread_wait_message_id")
        if wait_mid:
            try:
                await context.bot.delete_message(chat_id=THREADS_CHAT_ID, message_id=wait_mid)
            except Exception:
                pass
            req["thread_wait_message_id"] = None
        if req.get("thread_id"):
            op_mention = mention_html(query.from_user.id, (query.from_user.full_name or "–û–ø–µ—Ä–∞—Ç–æ—Ä"))
            await context.bot.send_message(
                chat_id=THREADS_CHAT_ID,
                message_thread_id=req["thread_id"],
                text=f"‚úÖ –û–ø–µ—Ä–∞—Ç–æ—Ä {op_mention} –ø—Ä–∏–Ω—è–ª –∑–∞—è–≤–∫—É",
                parse_mode=ParseMode.HTML,
            )
            req["updated_at"] = datetime.now(timezone.utc).isoformat()
            _save_state()
    except Exception as e:
        logging.exception("update topic accept message failed", exc_info=e)

    # –ü–∞–Ω–µ–ª—å –æ–ø–µ—Ä–∞—Ç–æ—Ä—É
    summary = request_summary_text(req)
    deep_link = _topic_message_link(req.get("thread_message_id") or 0)  # —è–∫–æ—Ä—å = –∑–∞–∫—Ä–µ–ø–ª—ë–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
    kb_admin = operator_controls_keyboard(req_id, req["status"], deep_link=deep_link)

    try:
        await query.message.edit_text(summary, reply_markup=kb_admin, parse_mode=ParseMode.HTML, disable_web_page_preview=True)
    except Exception:
        try:
            await context.bot.send_message(chat_id=query.from_user.id, text=summary, reply_markup=kb_admin, parse_mode=ParseMode.HTML, disable_web_page_preview=True)
        except Exception as e:
            logging.exception("send operator panel failed", exc_info=e)

    # –£–¥–∞–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —É –æ—Å—Ç–∞–ª—å–Ω—ã—Ö ‚Äî –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–æ
    others = [
        (pair.get("admin_id"), pair.get("message_id"))
        for pair in req.get("admin_message_ids", [])
        if pair.get("admin_id") and pair.get("message_id") and pair.get("admin_id") != query.from_user.id
    ]
    async def _del(aid, mid):
        try:
            await context.bot.delete_message(chat_id=aid, message_id=mid)
        except Exception:
            pass
    await asyncio.gather(*[_del(aid, mid) for aid, mid in others])

# ==========================================================
# ¬´–ù–ê–ó–ê–î¬ª
# ==========================================================
async def on_back(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data or ""
    _, _, target = data.partition(":")
    logging.info("BACK to -> %s", target)

    targets_map = {
        "task_code":      stage_task_code,
        "vehicle_type":   stage_vehicle_type,
        "vehicle_number": stage_vehicle_number,
        "tasks":          stage_tasks,
    }
    func = targets_map.get(target)
    if not func:
        await query.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —à–∞–≥.", show_alert=True); return

    context.user_data.setdefault("request", {"task_code":"","vehicle_type":"","vehicle_number":"","tasks":[]})
    await func(query.message, context)

# ==========================================================
# –û–ü–ï–†–ê–¢–û–† (—Å—Ç–∞—Ç—É—Å, –∑–∞–∫—Ä—ã—Ç–∏–µ, –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π) + –û–¢–ß–Å–¢
# ==========================================================
async def _refresh_operator_keyboards(context: ContextTypes.DEFAULT_TYPE, req: Dict, query: Optional["telegram.CallbackQuery"] = None):
    deep_link = _topic_message_link(req.get("thread_message_id") or 0)
    kb = operator_controls_keyboard(req["id"], req["status"], deep_link=deep_link)
    if query:
        try:
            await query.edit_message_reply_markup(reply_markup=kb)
        except Exception as e:
            logging.debug("edit clicked message kb failed: %s", e)

    for pair in req.get("admin_message_ids", []):
        try:
            await context.bot.edit_message_reply_markup(
                chat_id=pair["admin_id"],
                message_id=pair["message_id"],
                reply_markup=kb
            )
        except Exception:
            pass

async def on_operator_status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query; await query.answer()
    data = query.data or ""
    logging.info("CALLBACK DATA (op_status): %r", data)
    if not is_staff(query.from_user.id):
        await query.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.", show_alert=True); return

    parts = data.split(":", 2)
    if len(parts) != 3 or parts[0] != "op_status":
        await query.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏.", show_alert=True); return
    _, req_id_str, status = parts
    try:
        req_id = int(req_id_str)
    except ValueError:
        await query.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∑–∞—è–≤–∫–∏.", show_alert=True); return

    set_request_status(req_id, status, query.from_user.id)
    req = load_request(req_id)
    if not req:
        await query.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True); return

    await _refresh_operator_keyboards(context, req, query)
    await query.answer("–°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª—ë–Ω.")

async def _send_report_to_topic(context: ContextTypes.DEFAULT_TYPE, req: Dict):
    try:
        txt = report_text(req)
        await context.bot.send_message(
            chat_id=THREADS_CHAT_ID,
            message_thread_id=REPORT_THREAD_ID,
            text=txt,
            parse_mode=ParseMode.HTML,          # —Ñ–æ—Ä–º–∞—Ç –æ—Ç—á—ë—Ç–∞
            disable_web_page_preview=True,
        )
    except Exception as e:
        logging.exception("send report to topic failed", exc_info=e)

async def on_operator_close(update: Update, Context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query; await query.answer()
    data = query.data or ""
    logging.info("CALLBACK DATA (op_close): %r", data)
    if not is_staff(query.from_user.id):
        await query.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.", show_alert=True); return

    prefix, sep, rest = data.partition(":")
    if prefix != "op_close" or not sep:
        await query.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏.", show_alert=True); return
    try:
        req_id = int(rest)
    except ValueError:
        await query.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∑–∞—è–≤–∫–∏.", show_alert=True); return

    PENDING_ADMIN_COMMENT[query.from_user.id] = req_id
    _save_state()
    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton("‚úçÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", callback_data=f"op_comment_yes:{req_id}")],
        [InlineKeyboardButton("‚û°Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤", callback_data=f"op_comment_no:{req_id}")],
    ])
    await query.edit_message_reply_markup(reply_markup=None)
    await query.message.reply_text("–ó–∞–∫—Ä—ã–≤–∞—é –∑–∞—è–≤–∫—É. –î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π?", reply_markup=kb)

async def on_operator_comment_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query; await query.answer()
    data = query.data or ""
    logging.info("CALLBACK DATA (op_comment_*): %r", data)
    if not is_staff(query.from_user.id):
        await query.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!", show_alert=True); return

    if data.startswith("op_comment_yes:"):
        await query.message.reply_text("–ù–∞–ø–∏—à–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º")
        return

    if data.startswith("op_comment_no:"):
        req_id = PENDING_ADMIN_COMMENT.get(query.from_user.id)
        if not req_id:
            await query.answer("–ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∑–∞—è–≤–∫–∞ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è!", show_alert=True); return

        # –ù–ï –º–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å ‚Äî –æ—Å—Ç–∞–≤–ª—è–µ–º done/not_done/new –∫–∞–∫ –µ—Å—Ç—å
        set_request_comment(req_id, query.from_user.id, "")
        mark_closed(req_id, query.from_user.id)

        req = load_request(req_id)
        if req:
            await _send_report_to_topic(context, req)
            await _close_forum_topic_if_any(context, req)

        PENDING_ADMIN_COMMENT.pop(query.from_user.id, None)
        _save_state()
        await query.message.reply_text("–ó–∞—è–≤–∫–∞ –∑–∞–∫—Ä—ã—Ç–∞, –æ—Ç—á—ë—Ç —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω üëå")

async def on_staff_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–¢–µ–∫—Å—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞/–∞–¥–º–∏–Ω–∞ ‚Äî —ç—Ç–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫—Ä—ã—Ç–∏—é, –µ—Å–ª–∏ –æ–Ω –æ–∂–∏–¥–∞–µ—Ç—Å—è."""
    if update.effective_chat and update.effective_chat.type != "private":
        return
    user = update.effective_user
    if not is_staff(user.id):
        return

    req_id = PENDING_ADMIN_COMMENT.get(user.id)
    if not req_id:
        return

    comment = (update.effective_message.text or "").strip()
    set_request_comment(req_id, user.id, comment)
    # –ù–ï –º–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å ‚Äî –æ—Å—Ç–∞–≤–ª—è–µ–º done/not_done/new –∫–∞–∫ –µ—Å—Ç—å
    mark_closed(req_id, user.id)

    req = load_request(req_id)
    if req:
        await _send_report_to_topic(context, req)
        await _close_forum_topic_if_any(context, req)

    PENDING_ADMIN_COMMENT.pop(user.id, None)
    _save_state()
    await update.effective_message.reply_text("–ó–∞—è–≤–∫–∞ –∑–∞–∫—Ä—ã—Ç–∞, –æ—Ç—á—ë—Ç —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω üëå")

# ==========================================================
# –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–ù–û–ü–û–ö –¢–°/–ó–ê–î–ê–ß
# ==========================================================
async def on_vehicle_type(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    if is_operator(query.from_user.id) and not is_admin(query.from_user.id):
        await query.answer("–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–æ–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è —Ç–µ–ª–µ–æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤.", show_alert=True)
        return
    data = query.data or ""
    _, _, vtype = data.partition(":")
    if not vtype:
        await query.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏.", show_alert=True); return
    context.user_data.setdefault("request", {})
    context.user_data["request"]["vehicle_type"] = vtype
    await stage_vehicle_number(query.message, context)

async def on_tasks_toggle(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    data = query.data or ""
    logging.info("CALLBACK DATA (tasks): %r", data)

    if is_operator(query.from_user.id) and not is_admin(query.from_user.id):
        await query.answer("–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–æ–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è —Ç–µ–ª–µ–æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤!", show_alert=True)
        return

    if data == "tasks_preset":
        context.user_data.setdefault("request", {})
        context.user_data["request"]["tasks"] = PRESET_TASKS.copy()
        await _submit_request_and_notify(query, context)
        return

    if data == "tasks_manual":
        selected = context.user_data.get("request", {}).get("tasks", [])
        await query.message.reply_text(
            "–û—Ç–º–µ—Ç—å –Ω—É–∂–Ω—ã–µ –∑–∞–¥–∞—á–∏ –∏ –Ω–∞–∂–º–∏ ¬´–ì–æ—Ç–æ–≤–æ¬ª",
            reply_markup=tasks_keyboard(selected)
        )
        return

    if data == "tasks_custom":
        context.user_data.setdefault("request", {})
        context.user_data["request"]["tasks"] = ["custom"]
        await _submit_request_and_notify(query, context)
        return

    if data == "tasks_cancel":
        context.user_data.pop("request", None); context.user_data["await"] = None
        await query.message.reply_text("–û—Ç–º–µ–Ω–µ–Ω–æ.")
        return

    if data == "tasks_done":
        await _submit_request_and_notify(query, context)
        return

    prefix, sep, rest = data.partition(":")
    if prefix != "task_toggle" or not sep:
        await query.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–Ω–æ–ø–∫–∞.", show_alert=False)
        return

    code = rest
    selected = context.user_data.setdefault("request", {}).setdefault("tasks", [])
    if code in selected:
        selected.remove(code)
    else:
        selected.append(code)
    await query.edit_message_reply_markup(reply_markup=tasks_keyboard(selected))

# ==========================================================
# –ü–†–û–ß–ï–ï/–û–®–ò–ë–ö–ò
# ==========================================================
async def on_set_role_misc(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    if query.data == "noop":
        await query.answer(); return

async def on_error(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
    logging.exception("Unhandled error", exc_info=context.error)

# ==========================================================
# MAIN
# ==========================================================
def main():

    async def _post_init(app: Application):
        try:
            await app.bot.delete_webhook(drop_pending_updates=True)
            logging.info("Webhook deleted (if any), pending updates dropped.")
        except Exception as e:
            logging.warning(f"delete_webhook failed: {e}")
        me = await app.bot.get_me()
        logging.info("Logged in as @%s (id=%s) | PTB %s", me.username, me.id, PTB_VER)
        # –ë–∞–Ω–Ω–µ—Ä –Ω–∞ —Å—Ç–∞—Ä—Ç–µ
        logging.info("Build banner: %s", version_banner())

    persistence = PicklePersistence(filepath="ptb_persistence.pkl", update_interval=30)
    defaults = Defaults(parse_mode=ParseMode.HTML, disable_web_page_preview=True)

    app = Application.builder().token(BOT_TOKEN).post_init(_post_init).persistence(persistence).defaults(defaults).build()

    # –ö–æ–º–∞–Ω–¥—ã
    app.add_handler(CommandHandler("start", cmd_start))
    app.add_handler(CommandHandler("whoami", cmd_whoami))
    app.add_handler(CommandHandler("setrole", cmd_setrole))
    app.add_handler(CommandHandler("id", cmd_id))
    app.add_handler(CommandHandler("ping", cmd_ping))
    app.add_handler(CommandHandler("state", cmd_state))
    app.add_handler(CommandHandler("savestate", cmd_savestate))  # —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞
    # === VERSIONING
    app.add_handler(CommandHandler("version", cmd_version))
    app.add_handler(CommandHandler("changelog", cmd_changelog))

    # –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
    app.add_handler(TypeHandler(Update, on_any_update), group=-100)

    # –¢–ï–ö–°–¢–´: –õ–° –¥–ª—è –≤–æ–¥–∏—Ç–µ–ª—è/–∞–¥–º–∏–Ω–∞ (—Å–æ–∑–¥–∞–Ω–∏–µ), –∏ —Ç–µ–∫—Å—Ç-–æ—Ç–≤–µ—Ç –Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞/–∞–¥–º–∏–Ω–∞
    app.add_handler(MessageHandler(filters.ChatType.PRIVATE & ~filters.COMMAND, on_user_text), group=0)
    app.add_handler(MessageHandler(filters.ChatType.PRIVATE & ~filters.COMMAND, on_staff_text), group=1)

    # –ö–Ω–æ–ø–∫–∏: –≤—ã–±–æ—Ä —Ä–æ–ª–∏
    app.add_handler(CallbackQueryHandler(on_set_role, pattern=r"^set_role:(driver|operator)$"))

    # –ö–Ω–æ–ø–∫–∏ –ø–æ—à–∞–≥–æ–≤–æ–≥–æ –º–∞—Å—Ç–µ—Ä–∞
    app.add_handler(CallbackQueryHandler(on_skip_task_code, pattern=r"^skip_task_code$"))
    app.add_handler(CallbackQueryHandler(on_vehicle_type, pattern=r"^vehicle:.+"))
    app.add_handler(CallbackQueryHandler(on_tasks_toggle, pattern=r"^(tasks_preset|tasks_manual|tasks_custom|task_toggle:.+|tasks_done|tasks_cancel)$"))
    app.add_handler(CallbackQueryHandler(on_back, pattern=r"^back_to:.+"))

    # ¬´–ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è¬ª
    app.add_handler(CallbackQueryHandler(on_operator_claim, pattern=r"^op_claim:\d+$"))

    # –ü–∞–Ω–µ–ª—å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
    app.add_handler(CallbackQueryHandler(on_operator_status, pattern=r"^op_status:\d+:(done|not_done)$"))
    app.add_handler(CallbackQueryHandler(on_operator_close, pattern=r"^op_close:\d+$"))
    app.add_handler(CallbackQueryHandler(on_operator_comment_choice, pattern=r"^op_comment_(yes|no):\d+$"))

    app.add_handler(CallbackQueryHandler(on_set_role_misc))

    app.add_error_handler(on_error)
    logging.info("Bot starting (polling)‚Ä¶")
    app.run_polling(allowed_updates=Update.ALL_TYPES, close_loop=False)

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n[OK] –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ Ctrl+C", flush=True)
    except Exception as e:
        import traceback
        print("[FATAL] Uncaught exception:", e, flush=True)
        traceback.print_exc()
        raise
