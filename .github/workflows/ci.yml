name: CI

on:
  push:
    branches: [ "main", "master", "develop", "dev", "release/**" ]
    tags:
      - "v*.*.*"
  pull_request:

permissions:
  actions: read

env:
  PYTHON_VERSION: "3.11"

jobs:
  build-test-version:
    name: Build / Test / Version
    runs-on: ubuntu-latest

    steps:
      - name: Checkout (with full history & tags)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: pip

      - name: Install dependencies if present
        if: hashFiles('requirements.txt') != ''
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Derive git version env
        id: ver
        shell: bash
        run: |
          echo "GIT_DESCRIBE=$(git describe --tags --dirty --always)"  >> $GITHUB_ENV
          echo "GIT_BRANCH=$(git rev-parse --abbrev-ref HEAD)"         >> $GITHUB_ENV
          echo "GIT_SHA=$(git rev-parse --short HEAD)"                 >> $GITHUB_ENV
          echo "BUILD_AT=$(date -u +%Y-%m-%dT%H:%M:%SZ)"               >> $GITHUB_ENV
          # Для наглядных логов:
          echo "describe=$(git describe --tags --dirty --always)"      >> $GITHUB_OUTPUT
          echo "branch=$(git rev-parse --abbrev-ref HEAD)"             >> $GITHUB_OUTPUT
          echo "sha=$(git rev-parse --short HEAD)"                     >> $GITHUB_OUTPUT

      - name: Generate version.json (no extra deps)
        run: |
          python - <<'PY'
          import json, os, pathlib
          payload = {
            "describe": os.getenv("GIT_DESCRIBE",""),
            "branch":   os.getenv("GIT_BRANCH",""),
            "sha":      os.getenv("GIT_SHA",""),
            "build_at": os.getenv("BUILD_AT",""),
          }
          pathlib.Path("version.json").write_text(json.dumps(payload, ensure_ascii=False, indent=2), encoding="utf-8")
          print("version.json:", json.dumps(payload, ensure_ascii=False))
          PY

      - name: Show resulting version.json
        run: cat version.json

      - name: Run tests (if any)
        if: |
          hashFiles('pytest.ini') != '' ||
          hashFiles('pyproject.toml') != '' ||
          hashFiles('setup.cfg') != '' ||
          hashFiles('tests/**') != ''
        run: |
          pip install pytest
          pytest -q

      # Коммитим version.json обратно в ветку, чтобы сервер, делающий `git pull`, получил актуальную версию.
      - name: Commit version.json back to branch
        if: github.event_name == 'push' && startsWith(github.ref, 'refs/heads/')
        run: |
          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          if ! git diff --quiet -- version.json; then
            git add version.json
            git commit -m "chore(ci): update version.json [skip ci]"
            git push
          else
            echo "No changes in version.json"
          fi

  release:
    name: Release (on tag)
    needs: build-test-version
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest

    steps:
      - name: Checkout (with tags)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Ensure version.json exists (re-create if needed)
        run: |
          if [ ! -f version.json ]; then
            echo "version.json not found, rebuilding from git context"
            echo "GIT_DESCRIBE=$(git describe --tags --dirty --always)"  >> $GITHUB_ENV
            echo "GIT_BRANCH=$(git rev-parse --abbrev-ref HEAD)"         >> $GITHUB_ENV
            echo "GIT_SHA=$(git rev-parse --short HEAD)"                 >> $GITHUB_ENV
            echo "BUILD_AT=$(date -u +%Y-%m-%dT%H:%M:%SZ)"               >> $GITHUB_ENV
            python - <<'PY'
            import json, os, pathlib
            payload = {
              "describe": os.getenv("GIT_DESCRIBE",""),
              "branch":   os.getenv("GIT_BRANCH",""),
              "sha":      os.getenv("GIT_SHA",""),
              "build_at": os.getenv("BUILD_AT",""),
            }
            pathlib.Path("version.json").write_text(json.dumps(payload, ensure_ascii=False, indent=2), encoding="utf-8")
            print("version.json:", json.dumps(payload, ensure_ascii=False))
            PY
          fi

      - name: Create GitHub Release (auto notes)
        uses: softprops/action-gh-release@v2
        with:
          files: |
            version.json
          generate_release_notes: true
